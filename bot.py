import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz
from datetime import time

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_chats = set()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    chat_id = update.effective_chat.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_chats.add(chat_id)

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ üçΩÔ∏è\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        "üç≥ –ó–∞–≤—Ç—Ä–∞–∫ –≤ 8:00 (UTC+4)\n"
        "üç≤ –û–±–µ–¥ –≤ 13:00 (UTC+4)\n"
        "üçΩÔ∏è –£–∂–∏–Ω –≤ 19:00 (UTC+4)\n\n"
        "–ù–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–µ–ª–∞', –∫–æ–≥–¥–∞ –ø–æ–µ—à—å! üíñ"
    )


async def send_meal_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    job = context.job
    meal_type = job.data

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
    keyboard = [
        [InlineKeyboardButton("üçΩÔ∏è –ü–æ–µ–ª–∞", callback_data=f"ate_{meal_type}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    messages = {
        "breakfast": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–æ—Ç–∏–∫! üåÖ\n–ü–æ—Ä–∞ –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å üç≥\n–ù–µ –∑–∞–±—É–¥—å –ø–æ–∫—É—à–∞—Ç—å, —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–ª–Ω–æ–π —Å–∏–ª! üí™",
        "lunch": "–ö–æ—Ç–∏–∫, —É–∂–µ –æ–±–µ–¥! üç≤\n–í—Ä–µ–º—è –ø–æ–¥–∫—Ä–µ–ø–∏—Ç—å—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –Ω–µ–º–Ω–æ–≥–æ üòä",
        "dinner": "–í–µ—á–µ—Ä –Ω–∞—Å—Ç–∞–ª, –∫–æ—Ç–∏–∫! üåô\n–°–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ—É–∂–∏–Ω–∞—Ç—å üçΩÔ∏è\n–ü–æ–∫—É—à–∞–π —Ö–æ—Ä–æ—à–æ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º! üíñ"
    }

    message_text = messages.get(meal_type, "–ö–æ—Ç–∏–∫, –ø–æ—Ä–∞ –ø–æ–∫—É—à–∞—Ç—å! üçΩÔ∏è")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    for chat_id in user_chats.copy():  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–æ–ø–∏—é –Ω–∞ —Å–ª—É—á–∞–π –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –∏—Ç–µ—Ä–∞—Ü–∏–∏
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                reply_markup=reply_markup
            )
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")
            # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π chat_id
            user_chats.discard(chat_id)


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer()

    meal_type = query.data.replace('ate_', '')

    # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_messages = {
        "breakfast": "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞–ª–∞! üç≥\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —Å–∏–ª—ã –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å! üí™",
        "lunch": "–°—É–ø–µ—Ä, —á—Ç–æ —Ç—ã –ø–æ–æ–±–µ–¥–∞–ª–∞! üç≤\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –Ω–µ–º–Ω–æ–≥–æ üòä",
        "dinner": "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ —Ç—ã –ø–æ—É–∂–∏–Ω–∞–ª–∞! üçΩÔ∏è\n–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –∫–æ—Ç–∏–∫! üåôüíñ"
    }

    confirmation = confirm_messages.get(meal_type, "–ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –ø–æ–∫—É—à–∞–ª–∞! üíñ")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É
    await query.edit_message_text(
        text=f"{query.message.text}\n\n‚úÖ {confirmation}",
        reply_markup=None
    )


def setup_reminders(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å UTC+4 (–Ω–∞–ø—Ä–∏–º–µ—Ä, –°–∞–º–∞—Ä–∞)
    timezone = pytz.timezone('Europe/Samara')

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π (–≤—Ä–µ–º—è UTC+4)
    schedule = [
        ("breakfast", time(8, 0, 0, tzinfo=timezone)),  # –ó–∞–≤—Ç—Ä–∞–∫ –≤ 8:00
        ("lunch", time(13, 0, 0, tzinfo=timezone)),  # –û–±–µ–¥ –≤ 13:00
        ("dinner", time(21, 31, 0, tzinfo=timezone))  # –£–∂–∏–Ω –≤ 19:00
    ]

    for meal_type, reminder_time in schedule:
        application.job_queue.run_daily(
            send_meal_reminder,
            reminder_time,
            days=(0, 1, 2, 3, 4, 5, 6),  # –í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            data=meal_type,
            name=f"meal_reminder_{meal_type}"
        )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    setup_reminders(application)

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    main()