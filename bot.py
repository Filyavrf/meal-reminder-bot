import os
import logging
from datetime import time

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
import pytz

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–±—É–¥–µ—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è)
BOT_TOKEN = os.environ.get('BOT_TOKEN')

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_status = {}


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, –ª—é–±–∏–º–∞—è! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ üçΩÔ∏è\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        "üç≥ –ó–∞–≤—Ç—Ä–∞–∫ –≤ 8:00\n"
        "üç≤ –û–±–µ–¥ –≤ 13:00\n"
        "üçΩÔ∏è –£–∂–∏–Ω –≤ 19:00\n\n"
        "–ù–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–µ–ª–∞', –∫–æ–≥–¥–∞ –ø–æ–µ—à—å! üíñ"
    )


async def send_reminder(context: ContextTypes.DEFAULT_TYPE, meal_type: str, meal_name: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏"""
    job = context.job

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π
    keyboard = [
        [InlineKeyboardButton("üçΩÔ∏è –ü–æ–µ–ª–∞", callback_data=f"ate_{meal_type}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    messages = {
        "breakfast": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–æ—Ç–∏–∫! üåÖ\n–ü–æ—Ä–∞ –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å üç≥\n–ù–µ –∑–∞–±—É–¥—å –ø–æ–∫—É—à–∞—Ç—å, —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–ª–Ω–æ–π —Å–∏–ª! üí™",
        "lunch": "–ö–æ—Ç–∏–∫, —É–∂–µ –æ–±–µ–¥! üç≤\n–í—Ä–µ–º—è –ø–æ–¥–∫—Ä–µ–ø–∏—Ç—å—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –Ω–µ–º–Ω–æ–≥–æ üòä",
        "dinner": "–í–µ—á–µ—Ä –Ω–∞—Å—Ç–∞–ª, –∫–æ—Ç–∏–∫! üåô\n–°–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ—É–∂–∏–Ω–∞—Ç—å üçΩÔ∏è\n–ü–æ–∫—É—à–∞–π —Ö–æ—Ä–æ—à–æ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º! üíñ"
    }

    message = messages.get(meal_type, "–ö–æ—Ç–∏–∫, –ø–æ—Ä–∞ –ø–æ–∫—É—à–∞—Ç—å! üçΩÔ∏è")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await context.bot.send_message(
        chat_id=job.chat_id,
        text=message,
        reply_markup=reply_markup
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer()

    user_id = query.from_user.id
    meal_type = query.data.replace('ate_', '')

    # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_messages = {
        "breakfast": "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞–ª–∞! üç≥\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —Å–∏–ª—ã –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å! üí™",
        "lunch": "–°—É–ø–µ—Ä, —á—Ç–æ —Ç—ã –ø–æ–æ–±–µ–¥–∞–ª–∞! üç≤\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –Ω–µ–º–Ω–æ–≥–æ üòä",
        "dinner": "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ —Ç—ã –ø–æ—É–∂–∏–Ω–∞–ª–∞! üçΩÔ∏è\n–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –∫–æ—Ç–∏–∫! üåôüíñ"
    }

    confirmation = confirm_messages.get(meal_type, "–ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –ø–æ–∫—É—à–∞–ª–∞! üíñ")

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.edit_message_text(
        text=f"{query.message.text}\n\n‚úÖ {confirmation}",
        reply_markup=None
    )


async def setup_reminders(application: Application, chat_id: int):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    timezone = pytz.timezone('Europe/Moscow')  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω—É–∂–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    reminders = [
        ("breakfast", "–∑–∞–≤—Ç—Ä–∞–∫", "8:00"),
        ("lunch", "–æ–±–µ–¥", "13:00"),
        ("dinner", "—É–∂–∏–Ω", "21:15")
    ]

    for meal_type, meal_name, time_str in reminders:
        hour, minute = map(int, time_str.split(':'))

        application.job_queue.run_daily(
            send_reminder,
            time=time(hour, minute, 0, tzinfo=timezone),
            days=(0, 1, 2, 3, 4, 5, 6),
            chat_id=chat_id,
            name=f"{meal_type}_{chat_id}",
            data=meal_type
        )


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()


if __name__ == '__main__':
    main()