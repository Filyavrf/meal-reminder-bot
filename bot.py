import logging
import os
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
from datetime import time, datetime
import pytz
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
TOKEN = os.environ.get('TOKEN')
TIMEZONE = pytz.timezone('Asia/Novosibirsk')

# –í—Ä–µ–º—è –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏
MEAL_TIMES = [
    time(8, 0, 0),
    time(13, 0, 0),
    time(19, 0, 0)
]
MEAL_NAMES = ["–∑–∞–≤—Ç—Ä–∞–∫", "–æ–±–µ–¥", "—É–∂–∏–Ω"]
USER_CONFIRMATIONS = {}

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id

    keyboard = [['–ü–æ–µ–ª(–∞)']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç, –∫–æ—Ç–∏–∫! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –ø—Ä–∏—ë–º–∞—Ö –ø–∏—â–∏ –ø–æ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏ üçΩÔ∏è',
        reply_markup=reply_markup
    )

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞—á–∏
    for job in context.job_queue.jobs():
        job.schedule_removal()

    # –ü–ª–∞–Ω–∏—Ä—É–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    for meal_time, meal_name in zip(MEAL_TIMES, MEAL_NAMES):
        context.job_queue.run_daily(
            meal_reminder,
            time=meal_time,
            days=(0, 1, 2, 3, 4, 5, 6),
            chat_id=chat_id,
            name=f"{user_id}-{meal_name}",
            data=meal_name
        )

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏
    context.job_queue.run_repeating(check_missed_meals, interval=3600, first=10, chat_id=chat_id, name=f"{user_id}-check")


async def handle_meal_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    USER_CONFIRMATIONS[user_id] = datetime.now(TIMEZONE)

    responses = [
        f"–ú–æ–ª–æ–¥–µ—Ü, {update.effective_user.first_name}! –¢—ã —É–º–Ω–∏—á–∫–∞ ü•∞",
        "–û–±–æ–∂–∞—é, –∫–æ–≥–¥–∞ —Ç—ã –∑–∞–±–æ—Ç–∏—à—å—Å—è –æ —Å–µ–±–µ! üíñ",
        "–¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å, –º–æ–π —Ö–æ—Ä–æ—à–∏–π –∫–æ—Ç–∏–∫! üòª",
        "–¢—ã —Å–¥–µ–ª–∞–ª(–∞) –º–æ–π –¥–µ–Ω—å –ª—É—á—à–µ! üåà",
        "–ö–∞–∫ –∂–µ —è —Ç–æ–±–æ–π –≥–æ—Ä–∂—É—Å—å! ‚ú®",
    ]
    await update.message.reply_text(random.choice(responses))


async def meal_reminder(context: ContextTypes.DEFAULT_TYPE):
    job = context.job
    meal_name = job.data

    keyboard = [['–ü–æ–µ–ª(–∞)']]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    messages = [
        f"üçΩÔ∏è –ö–æ—Ç–∏–∫, –ø–æ—Ä–∞ –∫—É—à–∞—Ç—å! ({meal_name}) üíï",
        f"ü•£ –í—Ä–µ–º—è {meal_name.lower()}–∞, –º–æ–π —Ö–æ—Ä–æ—à–∏–π! –ù–µ –∑–∞–±—É–¥—å –ø–æ–∫—É—à–∞—Ç—å!",
        f"üí´ –ö–æ—Ç–∏–∫, {meal_name} –∂–¥—ë—Ç —Ç–µ–±—è! üåü",
    ]
    await context.bot.send_message(chat_id=job.chat_id, text=random.choice(messages), reply_markup=reply_markup)


async def check_missed_meals(context: ContextTypes.DEFAULT_TYPE):
    current_time = datetime.now(TIMEZONE)
    current_hour = current_time.hour
    current_meal = None

    if 7 <= current_hour < 11:
        current_meal = 0
    elif 12 <= current_hour < 15:
        current_meal = 1
    elif 18 <= current_hour < 21:
        current_meal = 2

    if current_meal is not None:
        user_id = context.job.name.split('-')[0]
        last_confirmation = USER_CONFIRMATIONS.get(int(user_id))
        if last_confirmation is None or last_confirmation.date() < current_time.date():
            meal_name = MEAL_NAMES[current_meal]
            messages = [
                f"üòø –ö–æ—Ç–∏–∫, —Ç—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª(–∞) {meal_name}... –í—Å—ë –≤ –ø–æ—Ä—è–¥–∫–µ?",
                f"üíî –Ø –Ω–µ –≤–∏–∂—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {meal_name}–∞... –¢—ã —Ç–æ—á–Ω–æ –ø–æ–∫—É—à–∞–ª(–∞)?",
                f"üåü –ù–∞–ø–æ–º–∏–Ω–∞—é: –≤–∞–∂–Ω–æ –Ω–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å –ø—Ä–∏—ë–º—ã –ø–∏—â–∏! –ö–∞–∫ –Ω–∞—Å—á—ë—Ç {meal_name}–∞?"
            ]
            await context.bot.send_message(chat_id=context.job.chat_id, text=random.choice(messages))


async def stats_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    last_confirmation = USER_CONFIRMATIONS.get(user_id)

    if last_confirmation:
        time_diff = datetime.now(TIMEZONE) - last_confirmation
        hours = int(time_diff.total_seconds() / 3600)
        if hours < 1:
            message = "üéâ –¢—ã —Å–µ–≥–æ–¥–Ω—è –º–æ–ª–æ–¥–µ—Ü! –í—Å–µ –ø—Ä–∏—ë–º—ã –ø–∏—â–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω—ã –≤–æ–≤—Ä–µ–º—è!"
        elif hours < 4:
            message = f"‚è∞ –ü—Ä–æ—à–ª–æ {hours} —á–∞—Å–∞ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –¢–∞–∫ –¥–µ—Ä–∂–∞—Ç—å!"
        else:
            message = f"üíù –ö–æ—Ç–∏–∫, –¥–∞–≤–Ω–æ –Ω–µ –±—ã–ª–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π... –í—Å—ë —Ö–æ—Ä–æ—à–æ?"
    else:
        message = "üìä –Ø –µ—â—ë –Ω–µ –ø–æ–ª—É—á–∞–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π. –ù–∞–¥–µ—é—Å—å, —Ç—ã –∫—É—à–∞–µ—à—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ!"
    await update.message.reply_text(message)


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    help_text = """
üçΩÔ∏è –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É-–Ω–∞–ø–æ–º–∏–Ω–∞—Ç–µ–ª—é:

/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏—ë–º–æ–≤ –ø–∏—â–∏
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

–ë–æ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–µ—Ç –æ (–ø–æ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏):
‚Ä¢ –ó–∞–≤—Ç—Ä–∞–∫–µ ü•û - 8:00
‚Ä¢ –û–±–µ–¥–µ üç≤ - 13:00  
‚Ä¢ –£–∂–∏–Ω–µ üçõ - 19:00

–ù–∞–∂–∏–º–∞–π "–ü–æ–µ–ª(–∞)" –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏!
    """
    await update.message.reply_text(help_text)


def main():
    if not TOKEN:
        logging.error("‚ùå –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é TOKEN –≤ Render ‚Üí Environment.")
        return

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats_command))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(MessageHandler(filters.Text("–ü–æ–µ–ª(–∞)"), handle_meal_confirmation))

    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –ø–æ –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏!")
    application.run_polling()


if __name__ == '__main__':
    main()
