import os
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes
import pytz
from datetime import time, datetime
from flask import Flask
from threading import Thread

# –ü—Ä–æ—Å—Ç–æ–π Flask —Å–µ—Ä–≤–µ—Ä –¥–ª—è health checks
app = Flask(__name__)


@app.route('/')
def health_check():
    return "Food Reminder Bot is running! üçΩÔ∏è", 200


@app.route('/health')
def health():
    return "OK", 200


def run_flask():
    app.run(host='0.0.0.0', port=10000, debug=False)


# –ó–∞–ø—É—Å–∫–∞–µ–º Flask –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
flask_thread = Thread(target=run_flask, daemon=True)
flask_thread.start()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('BOT_TOKEN')

if not BOT_TOKEN:
    logging.error("BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
    exit(1)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_chats = set()


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    chat_id = update.effective_chat.id

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º chat_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_chats.add(chat_id)
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.first_name} (ID: {chat_id}) –¥–æ–±–∞–≤–∏–ª –±–æ—Ç–∞")

    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.first_name}! –Ø –±—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –ø—Ä–∏–µ–º–∞—Ö –ø–∏—â–∏ üçΩÔ∏è\n"
        "–¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
        "üç≥ –ó–∞–≤—Ç—Ä–∞–∫ –≤ 8:00 (–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, UTC+7)\n"
        "üç≤ –û–±–µ–¥ –≤ 13:00 (–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, UTC+7)\n"
        "üçΩÔ∏è –£–∂–∏–Ω –≤ 19:00 (–ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫, UTC+7)\n\n"
        "–ù–µ –∑–∞–±—É–¥—å –Ω–∞–∂–∏–º–∞—Ç—å –∫–Ω–æ–ø–∫—É '–ü–æ–µ–ª–∞', –∫–æ–≥–¥–∞ –ø–æ–µ—à—å! üíñ"
    )


async def test_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    chat_id = update.effective_chat.id
    user_chats.add(chat_id)

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
    keyboard = [
        [InlineKeyboardButton("üçΩÔ∏è –ü–æ–µ–ª–∞", callback_data="ate_test")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await context.bot.send_message(
        chat_id=chat_id,
        text="üîß **–¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!**\n–ö–æ—Ç–∏–∫, –ø–æ—Ä–∞ –ø–æ–∫—É—à–∞—Ç—å! üçΩÔ∏è\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞.",
        reply_markup=reply_markup
    )


async def send_meal_reminder(context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∏–µ–º–µ –ø–∏—â–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    job = context.job
    meal_type = job.data

    logging.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {meal_type}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_chats)}")

    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É
    keyboard = [
        [InlineKeyboardButton("üçΩÔ∏è –ü–æ–µ–ª–∞", callback_data=f"ate_{meal_type}")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –ø—Ä–∏–µ–º–æ–≤ –ø–∏—â–∏
    messages = {
        "breakfast": "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ, –∫–æ—Ç–∏–∫! üåÖ\n–ü–æ—Ä–∞ –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞—Ç—å üç≥\n–ù–µ –∑–∞–±—É–¥—å –ø–æ–∫—É—à–∞—Ç—å, —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–ª–Ω–æ–π —Å–∏–ª! üí™",
        "lunch": "–ö–æ—Ç–∏–∫, —É–∂–µ –æ–±–µ–¥! üç≤\n–í—Ä–µ–º—è –ø–æ–¥–∫—Ä–µ–ø–∏—Ç—å—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –Ω–µ–º–Ω–æ–≥–æ üòä",
        "dinner": "–í–µ—á–µ—Ä –Ω–∞—Å—Ç–∞–ª, –∫–æ—Ç–∏–∫! üåô\n–°–∞–º–æ–µ –≤—Ä–µ–º—è –ø–æ—É–∂–∏–Ω–∞—Ç—å üçΩÔ∏è\n–ü–æ–∫—É—à–∞–π —Ö–æ—Ä–æ—à–æ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º! üíñ"
    }

    message_text = messages.get(meal_type, "–ö–æ—Ç–∏–∫, –ø–æ—Ä–∞ –ø–æ–∫—É—à–∞—Ç—å! üçΩÔ∏è")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
    successful_sends = 0
    for chat_id in user_chats.copy():
        try:
            await context.bot.send_message(
                chat_id=chat_id,
                text=message_text,
                reply_markup=reply_markup
            )
            successful_sends += 1
        except Exception as e:
            logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {e}")
            # –£–¥–∞–ª—è–µ–º –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π chat_id
            user_chats.discard(chat_id)

    logging.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_sends} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫—É"""
    query = update.callback_query
    await query.answer()

    meal_type = query.data.replace('ate_', '')

    # –°–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_messages = {
        "breakfast": "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ —Ç—ã –ø–æ–∑–∞–≤—Ç—Ä–∞–∫–∞–ª–∞! üç≥\n–¢–µ–ø–µ—Ä—å —É —Ç–µ–±—è –µ—Å—Ç—å —Å–∏–ª—ã –Ω–∞ –≤–µ—Å—å –¥–µ–Ω—å! üí™",
        "lunch": "–°—É–ø–µ—Ä, —á—Ç–æ —Ç—ã –ø–æ–æ–±–µ–¥–∞–ª–∞! üç≤\n–¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –Ω–µ–º–Ω–æ–≥–æ üòä",
        "dinner": "–ó–∞–º–µ—á–∞—Ç–µ–ª—å–Ω–æ, —á—Ç–æ —Ç—ã –ø–æ—É–∂–∏–Ω–∞–ª–∞! üçΩÔ∏è\n–°–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏, –∫–æ—Ç–∏–∫! üåôüíñ",
        "test": "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! üéâ"
    }

    confirmation = confirm_messages.get(meal_type, "–ú–æ–ª–æ–¥–µ—Ü, —á—Ç–æ –ø–æ–∫—É—à–∞–ª–∞! üíñ")

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —É–±–∏—Ä–∞—è –∫–Ω–æ–ø–∫—É
    await query.edit_message_text(
        text=f"{query.message.text}\n\n‚úÖ {confirmation}",
        reply_markup=None
    )


def setup_reminders(application: Application):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    # –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ù–æ–≤–æ—Å–∏–±–∏—Ä—Å–∫–∞ (UTC+7)
    timezone = pytz.timezone('Asia/Novosibirsk')

    # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º—è —Å —É—á–µ—Ç–æ–º —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
    breakfast_time = time(8, 0, 0)
    lunch_time = time(13, 0, 0)
    dinner_time = time(22, 12, 0)

    # –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    schedule = [
        ("breakfast", breakfast_time),
        ("lunch", lunch_time),
        ("dinner", dinner_time)
    ]

    for meal_type, reminder_time in schedule:
        # –ü—Ä–∏–º–µ–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å –∫–æ –≤—Ä–µ–º–µ–Ω–∏
        localized_time = timezone.localize(datetime.combine(datetime.today(), reminder_time)).timetz()

        application.job_queue.run_daily(
            send_meal_reminder,
            time=localized_time,
            days=(0, 1, 2, 3, 4, 5, 6),  # –í—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            data=meal_type,
            name=f"meal_reminder_{meal_type}"
        )

    logging.info("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    application = Application.builder().token(BOT_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("test", test_reminder))
    application.add_handler(CallbackQueryHandler(button_handler))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    setup_reminders(application)

    # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    logging.info("=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ ===")
    logging.info(f"–¢–æ–∫–µ–Ω: {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if BOT_TOKEN else '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}")
    logging.info("–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Asia/Novosibirsk (UTC+7)")
    logging.info("–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –∑–∞–≤—Ç—Ä–∞–∫ 8:00, –æ–±–µ–¥ 13:00, —É–∂–∏–Ω 19:00")
    logging.info("Flask —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 10000")
    logging.info("========================")

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    logging.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    application.run_polling()
    logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")


if __name__ == '__main__':
    main()